{"version":3,"sources":["components/window-view.styles.ts","enums/input-types.ts","forms/form.context.tsx","forms/form-error/form-error.styles.ts","forms/form-error/form-error.component.tsx","forms/from-input/form-input.styles.ts","forms/from-input/form-input.component.tsx","forms/form-select/form-select.styles.ts","forms/form-select/form-select.component.tsx","hooks/outside-click.ts","forms/form.component.tsx","forms/form-row.styles.ts","forms/form-button.styles.tsx","forms/form-textarea/form-textarea.styles.ts","forms/form-textarea/form-textarea.component.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","managers/validator.manager.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","pages/add-entry/add-entry.styles.ts","pages/add-entry/add-entry.component.tsx"],"names":["WindowView","styled","div","p","theme","colors","secondary","mobile","fonts","title","inputTypes","FormContext","createContext","useForm","useContext","FormErrorWrapper","error","FormError","name","errors","isSubmitted","useMemo","FormInputWrapper","paragraph","dark","FormInput","label","type","TEXT","values","update","value","className","htmlFor","onChange","e","val","target","NUMBER","parts","replace","split","console","log","length","shift","join","FormSelectWrapper","primary","FormSelect","ref","callBack","options","useState","isOpen","setIsOpen","inputValue","setInputValue","inputRef","useRef","filteredOptions","filter","option","toLowerCase","startsWith","slice","useEffect","useEvent","current","contains","find","String","onFocus","classes","map","i","optionValue","onClick","Form","initialValues","onSubmit","children","validations","setValues","setErrors","setIsSubmitted","Provider","oldValues","oldErrors","validate","preventDefault","Object","entries","validator","some","err","FormRow","FormButton","button","darken","FormTextAreaWrapper","FormTextarea","height","setHeight","style","newHeight","scrollHeight","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","key","Validator","instance","Constructor","TypeError","protoProps","staticProps","this","reduce","validation","push","x","parseInt","prototype","AddEntryWrapper","time","note","user","AddEntry","useData","users","setNote","u","id","history","useHistory","Routes","LIST","required","min","max","minLength","maxLength"],"mappings":"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","file":"static/js/4.a54298e8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nimport { mobile } from '../styles/_functions.styles';\n\nexport const WindowView = styled.div`\n    margin: 40px auto;\n    max-width: 500px;\n    border-radius: 10px;\n    border: 1px solid ${(p) => p.theme.colors.secondary};\n    padding: 40px;\n    position: relative;\n    box-shadow: 4px 10px 20px #e1e1e1, 0 0 10px #f1f1f1;\n    ${mobile`\n        box-shadow: none;\n        border: none;\n        border-radius:0;\n        padding: 40px 0; \n   `}\n    .window-view__title {\n        ${(p) => p.theme.fonts.title}\n        position: absolute;\n        width: auto;\n        top: -30px;\n        text-align: center;\n        left: 0;\n        right: 0;\n        span {\n            padding: 10px 20px;\n            background-color: white;\n        }\n    }\n`;\n","export enum inputTypes {\n    TEXT = 'text',\n    NUMBER = 'number',\n}\n","import { createContext, useContext } from 'react';\n\ninterface IFormContext<G extends object> {\n    values: G;\n    errors: Partial<{ [Option in keyof G]: string | null }>;\n    isSubmitted: boolean;\n    update: (name: keyof G, value: string) => void;\n}\nexport const FormContext = createContext<IFormContext<any> | null>(null);\nexport function useForm<G extends object>() {\n    return useContext(FormContext) as IFormContext<G>;\n}\n","import styled from 'styled-components';\n\nexport const FormErrorWrapper = styled.div`\n    color: ${(p) => p.theme.colors.error};\n    position: absolute;\n    top: 100%;\n    left: 0;\n    margin-top: 4px;\n    font-weight: 600;\n    font-size: 10px;\n`;\n","import React, { FC, useMemo } from 'react';\n\nimport { useForm } from '../form.context';\nimport { FormErrorWrapper } from './form-error.styles';\n\ninterface Props {\n    name: string;\n}\nconst FormError: FC<Props> = ({ name }) => {\n    const { errors, isSubmitted } = useForm<any>();\n    const error = useMemo(() => errors[name], [errors]);\n    return error && isSubmitted ? (\n        <FormErrorWrapper>{error}</FormErrorWrapper>\n    ) : null;\n};\nexport default FormError;\n","import styled from 'styled-components';\n\nexport const FormInputWrapper = styled.div`\n    position: relative;\n    margin-bottom: 24px;\n    .form-input {\n        &__label {\n            display: block;\n            ${(p) => p.theme.fonts.paragraph}\n            font-weight: 600;\n            margin-bottom: 6px;\n        }\n        &__input {\n            display: block;\n            ${(p) => p.theme.fonts.paragraph}\n            padding: 14px 14px;\n            border-radius: 8px;\n            border: 1px solid ${(p) => p.theme.colors.secondary};\n            color: ${(p) => p.theme.colors.dark};\n            width: 100%;\n            box-sizing: border-box;\n            appearance: none;\n        }\n    }\n`;\n","import React, { FC, useMemo } from 'react';\n\nimport { inputTypes } from '../../enums/input-types';\nimport { useForm } from '../form.context';\nimport FormError from '../form-error/form-error.component';\nimport { FormInputWrapper } from './form-input.styles';\n\ninterface InputProps {\n    name: string;\n    label: string;\n    type?: inputTypes;\n}\nconst FormInput: FC<InputProps> = ({ name, label, type = inputTypes.TEXT }) => {\n    const { values, update } = useForm<any>();\n    const value = useMemo(() => values[name as keyof typeof values], [values]);\n    return (\n        <FormInputWrapper className={'form-input'}>\n            <label htmlFor={name} className={'form-input__label'}>\n                {label}\n            </label>\n            <input\n                className={'form-input__input'}\n                value={value}\n                onChange={(e) => {\n                    let val = e.target.value;\n                    if (type === inputTypes.NUMBER) {\n                        val = val.replace(/[^\\d.]/g, '');\n                        const parts = val.split('.');\n                        console.log('oarts', parts);\n                        if (parts.length > 1) {\n                            val = `${parts.shift()}.${parts.join('')}`;\n                        }\n                    }\n                    update(name, val);\n                }}\n            />\n            <FormError name={name} />\n        </FormInputWrapper>\n    );\n};\nexport default FormInput;\n","import styled from 'styled-components';\n\nimport { FormInputWrapper } from '../from-input/form-input.styles';\n\nexport const FormSelectWrapper = styled(FormInputWrapper)`\n    .form-input {\n        &__options {\n            position: absolute;\n            top: 100%;\n            width: 100%;\n            margin: 10px 0 0 0;\n            padding: 0 14px;\n            list-style-type: none;\n            transform: scaleY(0);\n            opacity: 0;\n            transform-origin: top center;\n            transition: all 0.3s ease;\n            border-radius: 8px;\n            background-color: white;\n            overflow: hidden;\n            z-index: 2;\n            border: 1px solid ${(p) => p.theme.colors.secondary};\n            &__open {\n                transform: scaleY(1);\n                opacity: 1;\n            }\n        }\n        &__option {\n            color: blue;\n            display: block;\n            padding: 14px 0;\n            border-bottom: 1px solid ${(p) => p.theme.colors.secondary};\n            ${(p) => p.theme.fonts.paragraph}\n            cursor: pointer;\n            &:last-child {\n                border-bottom: none;\n            }\n            &__selected {\n                color: ${(p) => p.theme.colors.primary};\n                font-weight: 600;\n            }\n            &__disabled {\n                opacity: 0.4;\n            }\n        }\n    }\n`;\n","import React, { FC, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { classes } from '../../helpers';\nimport { useOutsideClick } from '../../hooks/outside-click';\nimport { IOption } from '../../types/option.type';\nimport { useForm } from '../form.context';\nimport FormError from '../form-error/form-error.component';\nimport { FormSelectWrapper } from './form-select.styles';\n\ninterface FormSelectProps {\n    name: string;\n    label: string;\n    options: IOption[];\n}\nconst FormSelect: FC<FormSelectProps> = ({ name, label, options }) => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const { values, update } = useForm<any>();\n    const value = useMemo(() => values[name as keyof typeof values], [values]);\n    const [inputValue, setInputValue] = useState('');\n    const inputRef = useRef<HTMLInputElement>(null);\n    const filteredOptions = useMemo(() => {\n        return options\n            .filter((option) =>\n                option.label.toLowerCase().startsWith(inputValue.toLowerCase())\n            )\n            .slice(0, 10);\n    }, [inputValue, options]);\n    useEffect(() => {\n        if (isOpen) setInputValue('');\n    }, [isOpen]);\n    useOutsideClick(inputRef, () => setIsOpen(false));\n    return (\n        <FormSelectWrapper className={'form-input'}>\n            <label htmlFor={name} className={'form-input__label'}>\n                {label}\n            </label>\n            <input\n                className={'form-input__input'}\n                value={\n                    isOpen\n                        ? inputValue\n                        : options.find(\n                              (option) => String(option.value) === value\n                          )?.label\n                }\n                ref={inputRef}\n                onFocus={() => setIsOpen(true)}\n                onChange={(e) => setInputValue(e.target.value)}\n            />\n            <FormError name={name} />\n            <ul\n                className={classes(\n                    'form-input__options',\n                    isOpen && 'form-input__options__open'\n                )}\n            >\n                {filteredOptions.length ? (\n                    filteredOptions.map(({ label, value: optionValue }, i) => (\n                        <li\n                            key={i}\n                            className={classes(\n                                'form-input__option',\n                                value === String(optionValue) &&\n                                    'form-input__option__selected'\n                            )}\n                            onClick={() => {\n                                update(name, String(optionValue));\n                            }}\n                        >\n                            {label}\n                        </li>\n                    ))\n                ) : (\n                    <li\n                        className={\n                            'form-input__option form-input__option__disabled'\n                        }\n                    >\n                        No results\n                    </li>\n                )}\n            </ul>\n        </FormSelectWrapper>\n    );\n};\nexport default FormSelect;\n","import { RefObject } from 'react';\n\nimport { useEvent } from './event.hook';\n\nexport const useOutsideClick = (\n    ref: RefObject<HTMLElement>,\n    callBack: () => void\n): void => {\n    const handleClick = (e: Event) => {\n        if (ref.current?.contains(e.target as Node)) {\n            return;\n        }\n        callBack();\n    };\n    useEvent('click', handleClick);\n};\n","import React, { FC, FormEvent, useEffect, useState } from 'react';\n\nimport { Validator } from '../managers/validator.manager';\nimport { FormContext } from './form.context';\n\ninterface IFormProps<G extends object> {\n    initialValues: G;\n    onSubmit: (data: G) => void;\n    validations?: Partial<{ [Option in keyof G]: Validator }>;\n}\nconst Form: FC<IFormProps<any>> = ({\n    initialValues,\n    onSubmit,\n    children,\n    validations,\n}) => {\n    type G = typeof initialValues;\n    const [values, setValues] = useState<G>(initialValues);\n    const [errors, setErrors] = useState<\n        Partial<{ [Option in keyof G]: string | null }>\n    >({});\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    useEffect(() => {\n        setValues(initialValues);\n    }, [initialValues]);\n    const handleSubmit = (e: FormEvent) => {\n        e.preventDefault();\n        setIsSubmitted(true);\n        if (validations) {\n            for (const [name, validator] of Object.entries(validations)) {\n                errors[name] = validator?.validate(values[name]);\n            }\n        }\n        setErrors({ ...errors });\n        if (Object.values(errors).some((err) => !!err)) return;\n        onSubmit(values);\n    };\n    const update = (name: keyof G, value: string) => {\n        setValues((oldValues: G) => ({\n            ...oldValues,\n            [name]: value,\n        }));\n        if (validations && validations[name as string]) {\n            setErrors((oldErrors) => ({\n                ...oldErrors,\n                [name]: validations[name as string]?.validate(value),\n            }));\n        }\n    };\n    return (\n        <FormContext.Provider value={{ values, errors, isSubmitted, update }}>\n            <form onSubmit={handleSubmit}>{children}</form>\n        </FormContext.Provider>\n    );\n};\nexport default Form;\n","import styled from 'styled-components';\n\nexport const FormRow = styled.div`\n    display: flex;\n    > .form-input {\n        width: 100%;\n        margin-right: 24px;\n        &:last-child {\n            margin-right: 0;\n        }\n    }\n`;\n","import styled from 'styled-components';\n\nimport { darken } from '../styles/_functions.styles';\n\nexport const FormButton = styled.button`\n    padding: 14px 14px;\n    ${(p) => p.theme.fonts.paragraph}\n    background-color: ${(p) => p.theme.colors.primary};\n    color: white;\n    border-radius: 8px;\n    border: none;\n    appearance: none;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    cursor: pointer;\n    &:hover {\n        background-color: ${(p) => darken(p.theme.colors.primary, 0.8)};\n    }\n`;\n","import styled from 'styled-components';\n\nimport { FormInputWrapper } from '../from-input/form-input.styles';\n\nexport const FormTextAreaWrapper = styled(FormInputWrapper)`\n    .form-input {\n        &__input {\n            resize: none;\n            overflow: hidden;\n        }\n    }\n`;\n","import React, { FC, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useForm } from '../form.context';\nimport FormError from '../form-error/form-error.component';\nimport { FormTextAreaWrapper } from './form-textarea.styles';\ninterface Props {\n    name: string;\n    label: string;\n}\nconst FormTextarea: FC<Props> = ({ name, label }) => {\n    const inputRef = useRef<HTMLTextAreaElement>(null);\n    const { values, update } = useForm<any>();\n    const [height, setHeight] = useState(0);\n    const value = useMemo(() => values[name as keyof typeof values], [values]);\n    useEffect(() => {\n        if (!inputRef.current) return;\n        inputRef.current.style.height = '0px';\n        const newHeight = inputRef.current.scrollHeight + 2;\n        setHeight(newHeight);\n        inputRef.current.style.height = `${newHeight}px`;\n    }, [inputRef.current, value]);\n    console.log('height', inputRef.current?.scrollHeight, height);\n    return (\n        <FormTextAreaWrapper className={'form-input'}>\n            <label htmlFor={name} className={'form-input__label'}>\n                {label}\n            </label>\n            <textarea\n                ref={inputRef}\n                style={{ height: `${height}px` }}\n                className={'form-input__input'}\n                value={value}\n                onChange={(e) => update(name, e.target.value)}\n            >\n                {value}\n            </textarea>\n            <FormError name={name} />\n        </FormTextAreaWrapper>\n    );\n};\nexport default FormTextarea;\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export type IValidationCallback = (val: string) => string | null;\nexport class Validator {\n    private validations: IValidationCallback[] = [];\n    public validate(val: string) {\n        return this.validations.reduce(\n            (error: null | string, validation) => error || validation(val),\n            null\n        );\n    }\n    public required() {\n        this.validations.push((val) => (val ? null : 'This field is required'));\n        return this;\n    }\n    public min(x: number) {\n        this.validations.push((val) =>\n            parseInt(val) < x ? `minimum ${x}` : null\n        );\n        return this;\n    }\n    public max(x: number) {\n        this.validations.push((val) =>\n            parseInt(val) > x ? `maximum ${x}` : null\n        );\n        return this;\n    }\n    public minLength(x: number) {\n        this.validations.push((val) =>\n            val.length < x ? `Use minimum ${x} chars` : null\n        );\n        return this;\n    }\n    public maxLength(x: number) {\n        this.validations.push((val) =>\n            val.length > x ? `Use maximum ${x} chars` : null\n        );\n        return this;\n    }\n}\nconst validator = () => new Validator();\nexport default validator;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import styled from 'styled-components';\n\nimport { WindowView } from '../../components/window-view.styles';\nexport const AddEntryWrapper = styled(WindowView)``;\n","import React, { FC, useMemo } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { inputTypes } from '../../enums/input-types';\nimport { Routes } from '../../enums/routes.enum';\nimport { Form, FormButton, FormInput, FormRow, FormSelect } from '../../forms';\nimport FormTextarea from '../../forms/form-textarea/form-textarea.component';\nimport validator from '../../managers/validator.manager';\nimport { useData } from '../../store/data.context';\nimport { ITime } from '../../types/entry.type';\nimport { IOption } from '../../types/option.type';\nimport { IUser } from '../../types/user.type';\nimport { AddEntryWrapper } from './add-entry.styles';\n\ntype FormType = ITime & { user: '' | number };\nconst initialValues: FormType = {\n    time: '',\n    note: '',\n    user: '',\n};\nconst AddEntry: FC = () => {\n    const { users, setNote } = useData();\n    const options: IOption[] = useMemo(\n        () => users.map((u) => ({ label: u.name, value: u.id })),\n        [users]\n    );\n    const history = useHistory();\n    const handleSubmit = (values: FormType) => {\n        const user = users.find((u) => u.id === +values.user) as IUser;\n        const id = setNote({\n            time: +values.time,\n            note: values.note,\n            user,\n        });\n        history.push(`${Routes.LIST}/${id}`);\n    };\n    return (\n        <AddEntryWrapper>\n            <h1 className={'window-view__title'}>\n                <span>Add new entry</span>\n            </h1>\n            <Form\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validations={{\n                    time: validator().required().min(0.1).max(300),\n                    note: validator().required().minLength(5).maxLength(300),\n                    user: validator().required(),\n                }}\n            >\n                <FormRow>\n                    <FormSelect\n                        name={'user'}\n                        label={'Select user'}\n                        options={options}\n                    />\n                    <FormInput\n                        name={'time'}\n                        label={'Time spent (h.)'}\n                        type={inputTypes.NUMBER}\n                    />\n                </FormRow>\n                <FormRow>\n                    <FormTextarea name={'note'} label={'Note'} />\n                </FormRow>\n                <FormButton type={'submit'}>Submit</FormButton>\n            </Form>\n        </AddEntryWrapper>\n    );\n};\nexport default AddEntry;\n"],"sourceRoot":""}